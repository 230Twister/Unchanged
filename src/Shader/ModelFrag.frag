#version 330 core

struct PointLight {
    vec3 position;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};
struct DirectionalLight {
    vec3 direction;     // 平行光方向
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};
struct SpotLight {
    vec3 position;      // 光源位置
    vec3  direction;    // 光源照的方向
    float cutOff;       // 内圈角度
    float outerCutOff;  // 外圈角度
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};
uniform PointLight point_light;             // 点光源
uniform DirectionalLight direction_light;   // 平行光源
uniform SpotLight spot_light;               // 聚光
uniform vec3 viewPos;                       // 观察者位置

out vec4 FragColor;

in vec3 Normal;                     // 法向量
in vec3 FragPos;                    // 片段坐标
in vec2 TexCoords;                  // 纹理坐标
in vec4 FragLightSpacePos;          // 片段位于光空间的坐标

uniform sampler2D texture_diffuse1;     // 漫反射贴图
uniform sampler2D texture_specular1;    // 高光贴图
uniform sampler2D texture_shadowMap;    // 深度贴图

float caculateShadow(vec3 lightDir) {
    // 获取采样坐标
    vec3 projCoords = FragLightSpacePos.xyz / FragLightSpacePos.w;
    projCoords = projCoords * 0.5 + 0.5;

    // 比对当前片段深度与深度贴图上的深度值
    float closestDepth = texture(texture_shadowMap, projCoords.xy).r; 
    float currentDepth = projCoords.z;
    float bias = max(0.05 * (1.0 - dot(Normal, lightDir)), 0.005);
    float shadow = currentDepth - bias > closestDepth  ? 1.0 : 0.0;

    return shadow;
}

// 计算点光源
vec3 getPointLight() {
    vec3 model_diffuse = vec3(texture(texture_diffuse1, TexCoords));
    vec3 model_specular = vec3(texture(texture_specular1, TexCoords));

    // 漫反射
    vec3 normal = normalize(Normal);
    vec3 lightDir = normalize(point_light.position - FragPos);
    float diff = max(dot(normal, lightDir), 0.0);
    vec3 diffuse = point_light.diffuse * (diff * model_diffuse);

    // 镜面高光
    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 halfwayDir = normalize(lightDir + viewDir);  
    float spec = pow(max(dot(normal, halfwayDir), 0.0), 32.0f);
    vec3 specular = point_light.specular * (spec * model_specular);

    return diffuse + specular;
}

// 计算平行光
vec3 getDirectionLight() {
    vec3 model_diffuse = vec3(texture(texture_diffuse1, TexCoords));
    vec3 model_specular = vec3(texture(texture_specular1, TexCoords));

    // 漫反射
    vec3 normal = normalize(Normal);
    vec3 lightDir = vec3(0.0f, 1.0f, 1.0f);
    float diff = max(dot(normal, lightDir), 0.0);
    vec3 diffuse = direction_light.diffuse * (diff * model_diffuse);

    // 镜面高光
    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 halfwayDir = normalize(lightDir + viewDir);  
    float spec = pow(max(dot(normal, halfwayDir), 0.0), 32.0f);
    vec3 specular = direction_light.specular * (spec * model_specular);

    // 计算阴影
    float shadow = (1.0 - caculateShadow(direction_light.direction));

    return shadow * (diffuse + specular);
}

// 计算聚光
vec3 getSpotLight() {
    vec3 model_diffuse = vec3(texture(texture_diffuse1, TexCoords));
    vec3 model_specular = vec3(texture(texture_specular1, TexCoords));

    vec3 lightDir = normalize(spot_light.position - FragPos);
    float theta = dot(lightDir, normalize(-spot_light.direction));
    float epsilon = spot_light.cutOff - spot_light.outerCutOff;
    float intensity = clamp((theta - spot_light.outerCutOff) / epsilon, 0.0, 1.0);    
      
    // 漫反射
    vec3 normal = normalize(Normal);
    float diff = max(dot(normal, lightDir), 0.0);
    vec3 diffuse = spot_light.diffuse * (diff * model_diffuse);

    // 镜面高光
    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 halfwayDir = normalize(lightDir + viewDir);  
    float spec = pow(max(dot(normal, halfwayDir), 0.0), 32.0f);
    vec3 specular = spot_light.specular * (spec * model_specular);

    return diffuse * intensity + specular * intensity;
}

void main()
{    
    vec3 model_diffuse = vec3(texture(texture_diffuse1, TexCoords));
    // 环境光
    vec3 ambient = direction_light.ambient * model_diffuse;

    vec3 result = ambient + getPointLight() + getDirectionLight() + getSpotLight();
    FragColor = vec4(result, 1.0f);
}